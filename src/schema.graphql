type JWT @jwt {
    id: String
}
type User
    @authorization(
        validate: [
            { where: { node: { userId: "$jwt.id" } }, operations: [READ] }
        ]
    ) {
    userId: String! @unique
    adminAccess: [Tenant!]! @relationship(type: "ADMIN_IN", direction: OUT)
}

type Tenant
    @authorization(
        validate: [{ where: { node: { admins: { userId: "$jwt.id" } } } }]
    ) {
    id: ID! @id
    admins: [User!]! @relationship(type: "ADMIN_IN", direction: IN)
    settings: Settings @relationship(type: "VEHICLECARD_OWNER", direction: IN)
}

type Settings
    @authorization(
        validate: [
            { where: { node: { tenant: { admins: { userId: "$jwt.id" } } } } }
        ]
    ) {
    id: ID! @id
    openingDays: [OpeningDay!]!
        @relationship(type: "VALID_GARAGES", direction: OUT)
    myWorkspace: MyWorkspace!
        @relationship(type: "HAS_WORKSPACE_SETTINGS", direction: OUT)
    tenant: Tenant! @relationship(type: "VEHICLECARD_OWNER", direction: OUT) # <---  this line
}

type OpeningDay
    @authorization(
        validate: [
            {
                where: {
                    node: {
                        settings: { tenant: { admins: { userId: "$jwt.id" } } }
                    }
                }
            }
        ]
    ) {
    id: ID! @id
    settings: Settings @relationship(type: "VALID_GARAGES", direction: IN)
    open: [OpeningHoursInterval!]!
        @relationship(type: "HAS_OPEN_INTERVALS", direction: OUT)
}
type OpeningHoursInterval
    @authorization(
        validate: [
            {
                where: {
                    node: {
                        openingDay: {
                            settings: {
                                tenant: { admins: { userId: "$jwt.id" } }
                            }
                        }
                    }
                }
            }
        ]
    ) {
    name: String
    openingDay: OpeningDay!
        @relationship(type: "HAS_OPEN_INTERVALS", direction: IN)
    # updatedBy: String
    #     @populatedBy(
    #         callback: "getUserIDFromContext"
    #         operations: [CREATE, UPDATE]
    #     )
}

type MyWorkspace
    @authorization(
        validate: [
            {
                where: {
                    node: {
                        settings: { tenant: { admins: { userId: "$jwt.id" } } }
                    }
                }
            }
        ]
    ) {
    settings: Settings!
        @relationship(type: "HAS_WORKSPACE_SETTINGS", direction: IN)
    workspace: String
    updatedBy: String
        @populatedBy(
            callback: "getUserIDFromContext"
            operations: [CREATE, UPDATE]
        )
}
